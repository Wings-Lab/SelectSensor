cpu  o_t: 0.9943763814672085
cuda o_t: 0.9943763814672082
Wrote profile results to select_sensor.py.lprof
Timer unit: 1e-06 s

Total time: 17.5642 s
File: select_sensor.py
Function: o_t at line 366

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   366                                               @profile
   367                                               def o_t(self, subset_index):
   368                                                   '''Given a subset of sensors T, compute the O_T
   369                                                   Attributes:
   370                                                       subset_index (list): a subset of sensors T, guarantee sorted
   371                                                   Return O_T
   372                                                   '''
   373         1         10.0     10.0      0.0          if not subset_index:  # empty sequence are false
   374                                                       return 0
   375         1        348.0    348.0      0.0          sub_cov = self.covariance_sub(subset_index)
   376         1        886.0    886.0      0.0          sub_cov_inv = np.linalg.inv(sub_cov)        # inverse
   377         1          2.0      2.0      0.0          o_t = 0
   378       257        344.0      1.3      0.0          for transmitter_i in self.transmitters:
   379       256        390.0      1.5      0.0              i_x, i_y = transmitter_i.x, transmitter_i.y
   380       256       2998.0     11.7      0.0              transmitter_i.set_mean_vec_sub(subset_index)
   381       256        325.0      1.3      0.0              prob_i = 1
   382     65792     129934.0      2.0      0.7              for transmitter_j in self.transmitters:
   383     65536     103817.0      1.6      0.6                  j_x, j_y = transmitter_j.x, transmitter_j.y
   384     65536      80190.0      1.2      0.5                  if i_x == j_x and i_y == j_y:
   385       256        286.0      1.1      0.0                      continue
   386     65280     757752.0     11.6      4.3                  transmitter_j.set_mean_vec_sub(subset_index)
   387     65280     243581.0      3.7      1.4                  pj_pi = transmitter_j.mean_vec_sub - transmitter_i.mean_vec_sub
   388     65280   16242144.0    248.8     92.5                  prob_i *= (1 - norm.sf(0.5 * math.sqrt(np.dot(np.dot(pj_pi, sub_cov_inv), pj_pi))))
   389       256       1201.0      4.7      0.0              o_t += prob_i * self.grid_priori[i_x][i_y]
   390         1          1.0      1.0      0.0          return o_t

Total time: 33.146 s
File: select_sensor.py
Function: o_t_host at line 1740

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1740                                               @profile
  1741                                               def o_t_host(self, subset_index):
  1742                                                   '''host code for o_t.
  1743                                                   Attributes:
  1744                                                       subset_index (np.ndarray, n=1): index of some sensors
  1745                                                   '''
  1746     10001      37018.0      3.7      0.1          n_h = len(self.transmitters)   # number of hypotheses/transmitters
  1747     10001     798878.0     79.9      2.4          sub_cov = self.covariance_sub(subset_index)
  1748     10001     894096.0     89.4      2.7          sub_cov_inv = np.linalg.inv(sub_cov)           # inverse
  1749     10001    5523036.0    552.2     16.7          d_meanvec_array = cuda.to_device(self.meanvec_array)
  1750     10001    4791862.0    479.1     14.5          d_subset_index = cuda.to_device(subset_index)
  1751     10001    4615409.0    461.5     13.9          d_sub_cov_inv = cuda.to_device(sub_cov_inv)
  1752     10001    3281317.0    328.1      9.9          d_results = cuda.device_array((n_h, n_h), np.float64)
  1753                                           
  1754     10001      27839.0      2.8      0.1          threadsperblock = (self.TPB, self.TPB)
  1755     10001      39564.0      4.0      0.1          blockspergrid_x = math.ceil(n_h/threadsperblock[0])
  1756     10001      17349.0      1.7      0.1          blockspergrid_y = math.ceil(n_h/threadsperblock[1])
  1757     10001      12708.0      1.3      0.0          blockspergrid = (blockspergrid_x, blockspergrid_y)
  1758                                           
  1759     10001    5609056.0    560.8     16.9          o_t_kernal[blockspergrid, threadsperblock](d_meanvec_array, d_subset_index, d_sub_cov_inv, d_results)
  1760                                           
  1761     10001    4615725.0    461.5     13.9          results = d_results.copy_to_host()
  1762     10001    2882139.0    288.2      8.7          return np.sum(results.prod(axis=1)*self.grid_priori[0][0])

